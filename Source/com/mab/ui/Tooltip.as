/*******************************************************************************SIMPLE TOOLTIP CLASS********************************************************************************This tool tip class is an extension of Lee Brimelow's 2005 ToolTip Class: http://theflashblog.com/?p=16This version adds a dropshadow, support for different lengths of tooltip text andsupport for flipping the tooltip if it would be displayed off the stage.********************************************************************************USEAGE********************************************************************************//instantiate the class//var tt:Tooltip = new Tooltip(toolTipBg Colour,toolTip Text Colour);var tt:Tooltip = new Tooltip(0x000000,0xCCCCCC);ThenIn a rollOver function;tt.showTip("A String for tool tip text");In a rollOut functiontt.removeTip();********************************************************************************2008 noponieshttp://www.blog.noponies.com********************************************************************************/import flash.filters.*;class com.mab.ui.Tooltip {	private var theTip:MovieClip;	private var theTipArrow:MovieClip;	private var theTipbg:MovieClip;	private var tFormat:TextFormat;	function Tooltip(hex:Number, hex2:Number) {		//watch the depth in this first call here! You want it above all other instances!		this.theTip = _root.createEmptyMovieClip("tooltip", 201);		this.theTipbg = theTip.createEmptyMovieClip("tooltipbg", this.theTip.getNextHighestDepth());		//tool tip box		this.theTipbg.beginFill(hex);		this.theTipbg.moveTo(0,0);		this.theTipbg.lineTo(100,0);		this.theTipbg.lineTo(100,20);		this.theTipbg.lineTo(0,20);		this.theTipbg.lineTo(0,0);		this.theTipbg.endFill();		//arrow		this.theTipArrow = theTip.createEmptyMovieClip("tooltipArrow", this.theTip.getNextHighestDepth());		this.theTipArrow.beginFill(hex);		this.theTipArrow.moveTo(0,20);		this.theTipArrow.lineTo(0,20);		this.theTipArrow.lineTo(5,30);		this.theTipArrow.lineTo(10,20);		this.theTipArrow.endFill();		//text Field		this.theTip.createTextField("theText",this.theTip.getNextHighestDepth(),3,3,3,20);		this.theTip.theText.selectable = false;		this.theTip.theText.autoSize = "left";		//text format		this.tFormat = new TextFormat();		this.tFormat.font = "Arial";		this.tFormat.size = 10;		this.tFormat.color = hex2;		this.tFormat.align = "center";		this.theTip.theText.setNewTextFormat(this.tFormat);				//drop shadow filter		var ds:DropShadowFilter = new DropShadowFilter(2, 45, 0x000000, .50, 4, 4, 1, 1.5, false, false, false);		this.theTip.filters = [ds];		this.theTip._visible = false;	}	//make a tooltip	public function showTip(theText:String):Void {		this.theTip.theText.text = "";		this.theTip.theText.text = theText;		this.theTip.tooltipbg._width = Math.floor(this.theTip.theText._width+8);				/*checking for mouse position and width of tooltip, if we are going to have the tooltip moving beyond the stage		we flip the toll tip*/		if (_root._xmouse+theTip._width>Stage.width) {			this.theTip._x = _root._xmouse-this.theTip._width+15;			this.theTip._y = _root._ymouse-35;			this.theTip.tooltipArrow._x = this.theTip._width-20		} else {			this.theTip._x = _root._xmouse-15;			this.theTip._y = _root._ymouse-35;			this.theTip.tooltipArrow._x =10		}				theTip._visible = true;				//make the tooltip follow the cursor		this.theTip.onMouseMove = function() {			if (_root._xmouse+this._width>Stage.width) {				this._x = _root._xmouse-this._width+15;				this._y = _root._ymouse-35;				this.tooltipArrow._x = this._width-20			} else {				this._x = _root._xmouse-15;				this._y = _root._ymouse-35;				this.tooltipArrow._x = 10			}			updateAfterEvent();		};	}		public function removeTip():Void {		this.theTip._visible = false;		this.theTip.theText.text = "";	}}